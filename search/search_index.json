{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><code>ckanext-media</code> is a CKAN extension that provides a flexible and centralized system for managing various media files (such as images, documents, and custom file types) using CKAN's core logic. It is designed to be a reusable solution for handling media assets across different parts of a CKAN site.</p> <p></p>"},{"location":"config_settings/","title":"Config Settings","text":"<p><code>ckan.upload.media.mimetypes</code> - This configuration is required by the CKAN Core uploader to specify the list of global allowed mimetypes for uploaded files. Here is the current list of the default global mimetypes: <pre><code>image/png image/gif image/jpeg text/csv application/pdf application/vnd.ms-excel application/vnd.openxmlformats-officedocument.spreadsheetml.sheet application/msword application/vnd.openxmlformats-officedocument.wordprocessingml.document application/zip application/json text/plain\n</code></pre></p> <p><code>ckanext.media.image.allowed_mimetypes</code> - List of allowed Mimetypes for Image Media type. Default: <pre><code>image/png image/gif image/jpeg\n</code></pre></p> <p><code>ckanext.media.image.max_filesize</code> - Maximum filesize allowed for uploading Image. By default is set to <code>3</code> (in MB).</p> <p><code>ckanext.media.file.allowed_mimetypes</code> - List of allowed Mimetypes for Image File type. Default: <pre><code>text/csv application/pdf application/vnd.ms-excel application/vnd.openxmlformats-officedocument.spreadsheetml.sheet application/msword application/vnd.openxmlformats-officedocument.wordprocessingml.document application/zip application/json text/plain\n</code></pre></p> <p><code>ckanext.media.file.max_filesize</code> - Maximum filesize allowed for uploading File. By default is set to <code>3</code> (in MB).</p>"},{"location":"installation/","title":"Installation","text":"<ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>Clone the source and install it on the virtualenv <pre><code>git clone https://github.com/Datashades/ckanext-media.git\ncd ckanext-media\npip install -e .\n</code></pre></p> </li> <li> <p>Add <code>media</code> to the <code>ckan.plugins</code> setting in your CKAN    config file (by default the config file is located at    <code>/etc/ckan/default/ckan.ini</code>).</p> </li> <li> <p>Initialize <code>media</code> table in the DB. <pre><code>ckan -c CKAN_CONFIG_PATH db upgrade -p media\n</code></pre></p> </li> <li> <p>Restart CKAN</p> </li> </ol>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#add-media-item","title":"Add Media item","text":"<p>Go to <code>/media/list</code> on your portal and click <code>Create</code> and choose Media type you want to Add.</p> <p>Fill the three fields:</p> <ul> <li> <p>Title - User friendly naming of future menu. </p> </li> <li> <p>Key - (Recommended to fill) It used as an alternative to ID, but can stays consistent through environments while deploying. There no validators regarding in which form the Key should be set, but only checks that is doesn't already exist. Case sensetive.</p> </li> <li> <p>File - Upload the file you want to attach to the Media item.</p> </li> </ul> <p></p>"},{"location":"usage/#attach-media-in-jinja-templates","title":"Attach Media in Jinja templates","text":"<p>You can retrieve the Media direct URL using the following helpers:</p> <ul> <li><code>h.get_media_fileurl_by_id(\"1\")</code> (Wouldn't recommend, as the ID can be different in different Environments)</li> <li><code>h.get_media_fileurl_by_key(\"my_custom_key\")</code> (Recommended)</li> <li><code>h.get_media_fileurl_by_filename(\"FILEMANE\")</code>. (Use if your Dataset or other entity stores the filename, rather then ID or Key)</li> </ul> <p>If you need the actual Media object to have the Title additionally, use:</p> <ul> <li><code>h.get_media_by_key(\"my_custom_key\")</code></li> <li><code>h.find_media(\"value\")</code> (More unique, but heavier call as you can pass either ID, Key or Filename and it will try to search through those item to find the Media)</li> </ul> <p>Call examples:</p> <pre><code>Get URL\n&lt;a href=\"{{ h.get_media_fileurl_by_key(\"my_custom_key\") }}\"&gt;Link&lt;/a&gt;\n\n\nGet full Media Object\n{% set media = h.get_media_by_key(\"my_custom_key\") %}\n{% if media %}\n &lt;a href=\"{{ h.get_media_fileurl_by_filename(media.file) }}\"&gt;{{ media.title }}&lt;/a&gt;\n{% endif %}\n\nSet background\n{% set background = h.get_media_fileurl_by_key(\"my_custom_key\") %}\n&lt;div class=\"my-custom-wrapper\" style=\"background: url('{{ background }}')\"&gt;\n    &lt;p&gt;Test&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"usage/#attach-media-field-to-dataset-or-other-entities","title":"Attach Media field to Dataset or other entities","text":"<p>This will work only if you are using Scheming or you'll need to modify the default schema using CKAN Hooks.</p> <p>Field example:</p> <pre><code>- field_name: media_field_name\n  label: Media field label\n  form_snippet: media.html\n  display_snippet: media.html\n  media_button_text: Explore existing images\n  validators: not_empty media_exists\n  media_type: image\n</code></pre> <p>Field params:</p> <ul> <li>form_snippet - will display usual text input field and additionally attach Media Widget above, where you can search through Medias and while clicking, you it will paste into the field either ID, Key or Filename depending on what was clicked.</li> <li>display_snippet - display link to the File</li> <li>media_button_text - Widget button text</li> <li>validators - to be more specifc <code>media_exists</code> will check if the media exists or not using <code>h.find_media(\"value\")</code>.</li> <li>media_type - type of Media you want to be attached, only 1 can be choosed.</li> </ul> <p>You can write your own snippets for using media or rendering it depending on your needs.</p>"},{"location":"usage/#additional-media-types-registration","title":"Additional Media types registration","text":"<p>There is an interface <code>IMedia</code> that has an method <code>media_types</code>, which provides you an ability to update/register new Media types.</p> <p>Example of how it might look in your <code>plugin.py</code> file:</p> <pre><code>from ckanext.media.interfaces import IMedia\n\nclass MyPlugin(plugins.SingletonPlugin):\n    plugins.implements(IMedia, inherit=True)\n\n    def media_types(self, media_types):\n\n        media_types['PROJECT_NAME_banner'] = { # Media type key, better use with prefix, as in future more Default type will be added and there won't be namespacing conflicts\n            \"label\": \"Banner\", # Label for the Media type\n            \"allowed_mimetypes\": ['image/png', 'image/gif', 'image/jpeg'], # Allowed mimetypes\n            \"max_filesize\": 3, # Maximum filesize in MB, default 3\n        }\n\n        return media_types\n</code></pre>"},{"location":"usage/#extending-default-media-types","title":"Extending Default Media types","text":"<p>Currently you can extend the mimietypes list for default Media types and the maximum filesize that is allowed (by default set to 3 MB).</p> <p>You can find those settings on the Config Settings page.</p>"}]}